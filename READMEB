Drop and go app to handle upload and display of images in Django.

The app is designed for webistes where images are targeted by title and associated with other models. Use cases might include websites of local interest, small-scale publishing and shops. All these examples associate images with other models, for example, SalesItem or Article.

The app is designed for images, so of limited use for other documents and media. It won't be useful for a large number of images, for that you will need to abandon use of Django admin. It is limited for use with a small numbers of images, because you may want more help with image previews and gallery handling. 

This app is not intended to be 'powerful'. Much of the code is written in a small-as-possible generic way. If you think part of the app may help you, you can strip back or rebuild.





# Depemdancies
Pillow
Unidecode


# General structure
Images are tracked in the database. Each uploaded image is recorded by an entry in a database table ''image'. Each original image can generate derivivate images. These are tracked in a seperate table called ''reform'. Widths, heights and bytesize are recorded, in case the storage media is not local files but cloud provision.

File-based images are stored in media/ with paths adjustable through Django settings.

Reforms are generated by filters. Filters can be defined in apps or centrally. 

Image delivery is by template filters and tags. The presence of a filter and tag will generate the reform automatically. For eample, you define a filter called ''Large'. When you add template code,

{% image Large urban_decay %} 

then visit the page, the app will generate a ''Large' reform to the spec given in the filter.

A few filters are predefined, (centre-anchored) Crop, Resize, and a SmartCrop. If you only need different image sizes, then you only need to configure these. But if you want to pass some time with Pillow code, you could add ''Chrome' and other similar filters.


The app also includes code to upload images, and a switch to deliver images through a URL.




# Init
You need,

    pip unidecode

[Unidecode](https://pypi.org/project/Unidecode/)

    pip pillow

[Pillow](https://pillow.readthedocs.io/en/stable/index.html)

Declare in apps,

???


# Quickstart
With the image app you do most of your work in the app which uses the images, not the app itself.

Model field declaration is by foreign key. Pick an app. For illustration I'm going to call the app Page, but pick your own. In models.py,


    from image.models import Image


    class Page(models.Model):

        img = models.ForeignKey(
            'image.Image',
            null=True,
            blank=True,
            on_delete=models.CASCADE,
            related_name='+'
            )

         etc.

Sync the DB to the updated model. This will also introduce the django-images tables to your database,

    manage.py makemigrations
    manage.py migrate

The model has auto-slug() methods on board. Declare this in admin.py to fill in automatically,

    class PageAdmin(admin.ModelAdmin):
        prepopulated_fields = {'slug': ('title')}

Now, through Django admin, you can upload a image. Upload one and give it a title (you can delete too, so don't worry about getting other settings to your preference).
 
Ok, let's define how we want the image to look. In the app, create image_filters.py containing filter declarations.e.g.

   from image import filters

   class Large(filters.Resize):
        width=382
        height=256

Ok, lets show the image. In the same app, goto a template, 

        {{ page.img.img_tag }}
        <caption>{{ page.img,title }}</caption>


# Types of image
No SVG. Pillow can't pass them over.


# Other usages
 but for resons of ecomomy, Django doessn't automatically use full clean.. This to thoroughtly check the slug in a 

 So maybe a DetailView,

    class ArticleDetailView(DetailView):
        model = Article
        context_object_name = 'article'
        
Then, it's a waste of the Wagtail setup, but you can summon the original in a template  as simply as,

        {{ article.img.img_tag }}
        <caption>{{ article.img,title }}</caption>


# All settings


# Credits
I take little credit for the upload and storage code. It has been ripped from the Wagtail CMS. Though I have responsibility for how I have treated the code.

[Wagtail documentation](https://docs.wagtail.io/en/v2.8.1/advanced_topics/images/index.html)
