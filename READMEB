A drop and go app to handle upload and display of images in Django.

This app is not intended to be 'powerful'. Thee base code is concise and levers Django recommentions and facilities wherever possible. It should form a good base for others wishing to build their own app.

The front end, by which I mean 'programmer API' is deesigned for a particular purpose (but most image apps aree). It is for webistes where images are targeted by title and associated with other models. Use cases might include websites of local interest, such as small-scale publishing and shops. These examples associate images with other models, for example, SalesItem or Article.

The app is designed for images, so of limited use for other documents and media. It won't be useful for a large number of images, for that you will need to abandon use of Django admin. It is also limited for use with a small numbers of images, because you may want more help with image previews and gallery handling. 

So far, I have not considrered,

- SVG images
- pormissions handling
- cloud storage.


# Depemdancies
Pillow
Unidecode

Optionally, the fron-end can work with other image librarties such as Wand and OpenCV.


# General structure
Images are tracked in the database. Each uploaded image is recorded by an entry in a database table ''image'. Each original image can generate derivivate images. These are tracked in a seperate table called ''reform'. Widths, heights and bytesize are recorded, in case the storage media is not local files but cloud provision.

File-based images are stored in media/ with paths adjustable through Django settings.

Reforms are generated by filters. Filters can be defined in apps or centrally. 

Image delivery is by template filters and tags. The presence of a filter and tag will generate the reform automatically. For eample, you define a filter called ''Large'. When you add template code,

    {% image Large urban_decay %} 

then visit the page, the app will generate a ''Large' reform to the spec given in the filter.

A few filters are predefined, (centre-anchored) Crop, Resize, and a SmartCrop. If you only need different image sizes, then you only need to configure these. But if you want to pass some time with image-processing code, you could add ''Chrome' and other similar filters.

The app also includes code to upload images, and a switch to deliver images through a URL.


# Init
You need,

    pip unidecode

[Unidecode](https://pypi.org/project/Unidecode/)

    pip pillow

[Pillow](https://pillow.readthedocs.io/en/stable/index.html)

Download the app code to Django

Declare in apps,

???

migrate now, or declare a field (see below) then migrate,

    ./manage.py makemigrations
    ./manage.py migrate


# Quickstart
## Fields and Upload
Pick an app. For illustration I'm going to call the app Page, but pick your own. In models.py,


    from image.models import Image


    class Page(models.Model):

        img = models.ForeignKey(
            'image.Image',
            null=True,
            blank=True,
            on_delete=models.CASCADE,
            related_name='+'
            )

         etc.

Sync the DB to the updated model,

    manage.py makemigrations
    manage.py migrate

Now, through Django admin, you can upload a image. Upload one and give it a title (you can delete too, so don't worry about getting other settings to your preference).
 
However, I don't know about you, if I have a new app I'd like to try with some substancial data. If you have a collection of test images somewhere,

    ./manage.py image_create_bulk pathToMyDirectory


## Viewing images
Ok, lets show an image. In the same app, goto a template, I'll assume you are passing the model in through the context. Add this, 

        {{ image-tag image.Large page.img }}
        <caption>{{ page.img.title }}</caption>

That's it. Refresh the server and browser and you should see the image. To change how the image is filtered, size and so on, see Filters.





# Further

== Filters
Model field declaration is by foreign key. 

With the image app you do most of your work in the app which uses the images, not the app itself.



## Admin

The model has auto-slug() code. Declare this in admin.py to fill in suggestions automatically,

    class PageAdmin(admin.ModelAdmin):
        prepopulated_fields = {'slug': ('title')}



## Filters
 In the app, create image_filters.py containing filter declarations.e.g.

   from image import filters

   class Large(filters.Resize):
        width=382
        height=256



## Template tags
There is a tag to find images by title. Sometimes this will be useful, for . However, if you are already passing a model through a context, it is a database hit,

        {{ image-tag-by-title image.Large titleOfImage }}
        <caption>{{ page.img,title }}</caption>



## Settings
Images accepts some settings. They look like the Django template setting,

    IMAGES = [
        {
            'APP_DIRS': True,
            # 'MEDIA_SUBPATH_ORIGINALS':
            # 'MEDIA_SUBPATH_REFORMS':
            'TRUNCATE_PATHS' : True,
            'MODULES': [
                        "someSiteName",
            ],
        },
    ]

APP_DIRS
defines if image_filters will be sought for in apps. If false, the app only uses app-defined filters.

TRUNCATE_PATHS
Truncate filepaths. This is usually done by truncating the length of filenames (which can become very long on the web). This is because Django imposes a 

MODULES
defines extra places to put modules. The above example suggests a sitewide filter collection in the site directory, same as the site-wide template collection most Djangos have in the same directory. The setting takes module paths, not filepaths, because the filter files are live code.

# Other usages
 but for resons of ecomomy, Django doessn't automatically use full clean.. This to thoroughtly check the slug in a 

 So maybe a DetailView,

    class ArticleDetailView(DetailView):
        model = Article
        context_object_name = 'article'
        
Then, it's a waste of the Wagtail setup, but you can summon the original in a template  as simply as,

        {{ article.img.img_tag }}
        <caption>{{ article.img,title }}</caption>

# Types of image
No SVG. Pillow can't pass them over.




# Credits
I take little credit for the upload and storage code. It was ripped from the Wagtail CMS. Though I have responsibility for how I have treated the code.

[Wagtail documentation](https://docs.wagtail.io/en/v2.8.1/advanced_topics/images/index.html)
